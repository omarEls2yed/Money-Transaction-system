#define _pragma
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <chrono>
#include <climits>
#include <cmath>
#include <complex>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <vector>
#include <stack>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <fstream>
#include <bitset>
using namespace std;
string cinbank, cincardtype;
class AccountModel;
class CardModel;
class CreateAccount;
class AccountService;
class IcardPayment;
class OperationService;
class Visa;
class MasterCard;

class AccountModel
{
public:
	string Name;
	string Email;
	string City;
	string Gender;
	string Password;
	string BirthdayYear;
	string PhoneNumber;
};
class CardModel
{
public:
	string CardholderName;
	string PhoneNumber;
	string CardNumber;
	string ZipCode;
	string CVV;
	string amountofmoney;
};
class CreateAccount
{
public:
	AccountModel* account = new AccountModel;
	CreateAccount(AccountModel* account2)
	{
		account->Name = account2->Name;
		account->City = account2->City;
		account->BirthdayYear = account2->BirthdayYear;
		account->Email = account2->Email;
		account->Gender = account2->Gender;
		account->PhoneNumber = account2->PhoneNumber;
		account->Password = account2->Password;
	}
};
class AccountService
{
public:
	bool cheak_card(CardModel* card, string bankname, string cardtype)
	{
		map<pair<int, vector<string>>, int>mp2;
		ifstream file;
		if (bankname == "Banquemisr" and cardtype == "visa card") {
			file.open("visaBanquemisr.txt", ios::in);
		}
		else if (bankname == "National Bank of Egypt" and cardtype == "visa card")
		{
			file.open("visaNational Bank of Egypt.txt", ios::in);
		}
		else if (bankname == "The United Bank of Egypt" and cardtype == "visa card")
		{
			file.open("visaThe United Bank of Egypt.txt", ios::in);
		}
		else if (bankname == "Banquemisr" and cardtype == "master card")
		{
			file.open("masterBanquemisr.txt", ios::in);
		}
		else if (bankname == "National Bank of Egypt" and cardtype == "master card")
		{
			file.open("masterNational Bank of Egypt.txt", ios::in);
		}
		else if (bankname == "The United Bank of Egypt" and cardtype == "master card")
		{
			file.open("masterThe United Bank of Egypt.txt", ios::in);
		}
		else
		{
			cout << "bank not found" << endl;
		}
		while (file.is_open()) {
			string line;
			int counter = 0;
			int indx = 0;
			vector<string>cheak;
			while (getline(file, line))
			{
				if (line == "*") {
					counter = 0;
					indx++;
					cheak.clear();
				}
				if (counter >= 1 and counter <= 5)
				{
					cheak.push_back(line);
				}
				if (counter == 6)
				{
					mp2[{indx, cheak}]++;
				}
				counter++;
			}
			file.close();
		}
		vector<string>cheak2;
		cheak2.push_back(card->CardholderName);
		cheak2.push_back(card->CardNumber);
		cheak2.push_back(card->CVV);
		cheak2.push_back(card->ZipCode);
		cheak2.push_back(card->PhoneNumber);
		for (int i = 1; i <= 8; i++)
		{
			if (mp2[{i, cheak2}])return true;
		}
		return false;
	}
	bool cheak_card(CardModel* card, string bankname, string cardtype, string amount)
	{
		map<pair<int,vector<string>>,int>mp2;
		ifstream file;
		if (bankname == "Banquemisr" and cardtype == "visa card") {
			file.open("visaBanquemisr.txt", ios::in);
		}
		else if (bankname == "National Bank of Egypt" and cardtype == "visa card")
		{
			file.open("visaNational Bank of Egypt.txt", ios::in);
		}
		else if (bankname == "The United Bank of Egypt" and cardtype == "visa card")
		{
			file.open("visaThe United Bank of Egypt.txt", ios::in);
		}
		else if (bankname == "Banquemisr" and cardtype == "master card")
		{
			file.open("masterBanquemisr.txt", ios::in);
		}
		else if (bankname == "National Bank of Egypt" and cardtype == "master card")
		{
			file.open("masterNational Bank of Egypt.txt", ios::in);
		}
		else if (bankname == "The United Bank of Egypt" and cardtype == "master card")
		{
			file.open("masterThe United Bank of Egypt.txt", ios::in);
		}
		else
		{
			cout << "bank not found" << endl;
		}
		while (file.is_open()) {
			string line;
			int counter = 0;
			int indx = 0;
			vector<string>cheak;
			while (getline(file, line))
			{
				if (line == "*") {
					counter = 0;
					indx++;
					cheak.clear();
				}
				if (counter >= 1 and counter <= 5)
				{
					cheak.push_back(line);
				}
				if (counter == 6)
				{
					int number1 = stoi(line);
					int number2 = stoi(amount);
					if (number1 >= number2)mp2[{indx, cheak}]++;
				}
				counter++;
			}
			file.close();
		}
		vector<string>cheak2;
		cheak2.push_back(card->CardholderName);
		cheak2.push_back(card->CardNumber);
		cheak2.push_back(card->CVV);
		cheak2.push_back(card->ZipCode);
		cheak2.push_back(card->PhoneNumber);
		for (int i = 1; i <= 8; i++)
		{
			if (mp2[{i, cheak2}])return true;
		}
		return false;
	}
	bool cheak_card(string cardnumber, string bankname, string cardtype)
	{
		map<string,int>mp2;
		ifstream file;
		if (bankname == "Banquemisr" and cardtype == "visa card") {
			file.open("visaBanquemisr.txt", ios::in);
		}
		else if (bankname == "National Bank of Egypt" and cardtype == "visa card")
		{
			file.open("visaNational Bank of Egypt.txt", ios::in);
		}
		else if (bankname == "The United Bank of Egypt" and cardtype == "visa card")
		{
			file.open("visaThe United Bank of Egypt.txt", ios::in);
		}
		else if (bankname == "Banquemisr" and cardtype == "master card")
		{
			file.open("masterBanquemisr.txt", ios::in);
		}
		else if (bankname == "National Bank of Egypt" and cardtype == "master card")
		{
			file.open("masterNational Bank of Egypt.txt", ios::in);
		}
		else if (bankname == "The United Bank of Egypt" and cardtype == "master card")
		{
			file.open("masterThe United Bank of Egypt.txt", ios::in);
		}
		else
		{
			cout << "bank not found" << endl;
		}
		while (file.is_open()) {
			string line;
			int counter = 0;
			while (getline(file,line))
			{
				if (line == "*"){
					counter = 0;
				}
				if (counter == 2){
					mp2[line]++;
				}
				counter++;
			}
			file.close();
		}
		if (mp2[cardnumber] > 0)return true;
		else return false;
	}
	void add_card(CardModel* card)
	{
		ofstream file;
		file.open("cards.txt", ios::out);
		file << "*" << endl;
		file << card->CardholderName << endl;
		file << card->PhoneNumber << endl;
		file << card->CardNumber << endl;
		file << card->ZipCode << endl;
		file << card->CVV << endl;
		file << card->amountofmoney << endl;
		file.close();
	}
	bool cheak_account(AccountModel* accountmodl)
	{
		map<pair<int, vector<string>>, int>mp;
		ifstream account;
		account.open("accounts.txt", ios::in);
		while (account.is_open())
		{
			string line;
			int counter = 0;
			int indx = 0;
			vector<string>cheak;
			while (getline(account, line))
			{
				if (line == "*") {
					counter = 0;
					indx++;
					cheak.clear();
				}
				if (counter >= 1 and counter <= 6)
				{
					cheak.push_back(line);
				}
				if (counter == 7)
				{
					cheak.push_back(line);
					mp[{indx, cheak}]++;
				}
				counter++;
			}
			account.close();
		}
		vector<string>cheak2;
		cheak2.push_back(accountmodl->Name);
		cheak2.push_back(accountmodl->Email);
		cheak2.push_back(accountmodl->City);
		cheak2.push_back(accountmodl->Gender);
		cheak2.push_back(accountmodl->Password);
		cheak2.push_back(accountmodl->BirthdayYear);
		cheak2.push_back(accountmodl->PhoneNumber);
		for (int i = 1; i <= 8; i++)
		{
			if (mp[{i, cheak2}])return false;
		}
		return true;
	}
	void save_account(AccountModel* accountmodl)
	{
		fstream account;
		account.open("accounts.txt", ios::app);
		account << "*" << endl;
		account << accountmodl->Name << endl;
		account << accountmodl->Email << endl;
		account << accountmodl->City << endl;
		account << accountmodl->Gender << endl;
		account << accountmodl->Password << endl;
		account << accountmodl->BirthdayYear << endl;
		account << accountmodl->PhoneNumber << endl;
		account.close();
	}
	int indx(CardModel* card, string bankname, string cardtype)
	{
		map<pair<int, vector<string>>, int>mp2;
		ifstream file;
		if (bankname == "Banquemisr" and cardtype == "visa card") {
			file.open("visaBanquemisr.txt", ios::in);
		}
		else if (bankname == "National Bank of Egypt" and cardtype == "visa card")
		{
			file.open("visaNational Bank of Egypt.txt", ios::in);
		}
		else if (bankname == "The United Bank of Egypt" and cardtype == "visa card")
		{
			file.open("visaThe United Bank of Egypt.txt", ios::in);
		}
		else if (bankname == "Banquemisr" and cardtype == "master card")
		{
			file.open("masterBanquemisr.txt", ios::in);
		}
		else if (bankname == "National Bank of Egypt" and cardtype == "master card")
		{
			file.open("masterNational Bank of Egypt.txt", ios::in);
		}
		else if (bankname == "The United Bank of Egypt" and cardtype == "master card")
		{
			file.open("masterThe United Bank of Egypt.txt", ios::in);
		}
		else
		{
			cout << "bank not found" << endl;
		}
		while (file.is_open())
		{
			string line;
			int counter = 0;
			int indx = 0;
			vector<string>cheak;
			while (getline(file, line))
			{
				if (line == "*")
				{
					counter = 0;
					indx++;
					cheak.clear();
				}
				if (counter >= 1 and counter <= 5)
				{
					cheak.push_back(line);
				}
				if (counter == 6)
				{
					mp2[{indx, cheak}]++;
				}
				counter++;
			}
			file.close();
		}
		vector<string>cheak2;
		cheak2.push_back(card->CardholderName);
		cheak2.push_back(card->CardNumber);
		cheak2.push_back(card->CVV);
		cheak2.push_back(card->ZipCode);
		cheak2.push_back(card->PhoneNumber);
		for (int i = 1; i <= 8; i++)
		{
			if (mp2[{i, cheak2}])return i;
		}
	}
	void updatefile(string save, int place, string amountofmoney, char want) {
		ifstream file2;
		file2.open(save, ios::in);
		vector<string>vb;
		while (file2.is_open())
		{
			string line;
			while (getline(file2, line))
			{
				vb.push_back(line);
			}
			file2.close();
		}
		int cvp = 0;
		int wantplace = 0;
		for (int i = 0; i < vb.size(); i++)
		{
			if (vb[i] == "*")
				cvp++;
			wantplace++;
			if (cvp == place)
			{
				wantplace += 6;
				break;
			}
		}
		wantplace--;
		string haveofmoney = vb[wantplace];
		int number1 = stoi(haveofmoney);
		int number2 = stoi(amountofmoney);
		if (want == '-')
		{
			number1 -= number2;
		}
		else
		{
			number1 += number2;
		}
		string newnumber = to_string(number1);
		vb[wantplace] = newnumber;
		ofstream step;
		step.open(save, ios::trunc);
		for (int i = 0; i < vb.size(); i++)
		{
			step << vb[i] << endl;
		}
		step.close();
	}

};
class ICardPayment
{
public:
	virtual void send_money(CardModel* from, string cardnumber, string frombank, string tobank, string tocardtype) = 0;
	virtual void collect_money(CardModel* to, string tobank) = 0;
};
class Visa : public ICardPayment
{
public:
	AccountService* S = new AccountService;
	string cardtype = "visa card";
	string amountofmoney;
	void send_money(CardModel* from, string cardnumber, string frombank, string tobank, string tocardtype)
	{
		cout << "Enter the amount of money u want to sent" << endl;
		cin >> amountofmoney;
		if (S->cheak_card(from, frombank, cardtype, amountofmoney) and S->cheak_card(cardnumber, tobank, tocardtype))
		{
			fstream file;
			file.open("transaction.txt", ios::app);
			file << from->CardNumber << endl;
			file << cardnumber << endl;
			file << amountofmoney << endl;
			file.close();
			fstream file2;
			file2.open("transaction history.txt", ios::app);
			file2 << from->CardNumber << endl;
			file2 << cardnumber << endl;
			file2 << amountofmoney << endl;
			file2.close();
			AccountService* Service_Account = new AccountService;
			int place = Service_Account->indx(from, frombank, cardtype);
			string save;
			if (frombank == "Banquemisr")
			{
				save = "visaBanquemisr.txt";
			}
			else if (frombank == "National Bank of Egypt")
			{
				save = "visaNational Bank of Egypt.txt";
			}
			else if (frombank == "The United Bank of Egypt")
			{
				save = "visaThe United Bank of Egypt.txt";
			}
			Service_Account->updatefile(save, place, amountofmoney, '-');
		}
		else {
			cout << "you havent this amount of monye" << endl;
		}
	}
	void collect_money(CardModel* to, string tobank)
	{
		if (S->cheak_card(to,tobank,cardtype))
		{
			ifstream file1;
			file1.open("transaction.txt", ios::in);
			vector <string>sv;
			while (file1.is_open())
			{
				string line;
				while (getline(file1, line))
				{
					sv.push_back(line);
				}
				file1.close();
			}
			vector<string>money;
			for (int i = 0; i < sv.size(); i++)
			{
				if (sv[i] == to->CardNumber)
				{
					if (sv[i + 1] != "0") {
						money.push_back(sv[i + 1]);
					}
					sv[i+1] = "0";
				}
			}
			ofstream file2;
			file2.open("transaction.txt", ios::trunc);
			for (int i = 0; i < sv.size(); i++)
			{
				file2 << sv[i] << endl;
			}
			file2.close();
			AccountService* Service_Account = new AccountService;
			int place = Service_Account->indx(to, tobank, cardtype);
			string save;
			if (tobank == "Banquemisr")
			{
				save = "visaBanquemisr.txt";
			}
			else if (tobank == "National Bank of Egypt")
			{
				save = "visaNational Bank of Egypt.txt";
			}
			else if (tobank == "The United Bank of Egypt")
			{
				save = "visaThe United Bank of Egypt.txt";
			}
			for (int i = 0; i < money.size(); i++) {
				Service_Account->updatefile(save, place, money[i], '+');
			}
		}
	}
};
class MasterCard : public ICardPayment
{
public:
	AccountService* S = new AccountService;
	string cardtype = "master card";
	string amountofmoney;
	void send_money(CardModel* from, string cardnumber, string frombank, string tobank, string tocardtype)
	{
		cout << "Enter the amount of money u want to sent" << endl;
		cin >> amountofmoney;
		if (S->cheak_card(from, frombank, cardtype, amountofmoney) and S->cheak_card(cardnumber, tobank, tocardtype))
		{
			fstream file;
			file.open("transaction.txt", ios::app);
			file << from->CardNumber << endl;
			file << cardnumber << endl;
			file << amountofmoney << endl;
			file.close();
			fstream file2;
			file2.open("transaction history.txt", ios::app);
			file2 << from->CardNumber << endl;
			file2 << cardnumber << endl;
			file2 << amountofmoney << endl;
			file2.close();
			AccountService* Service_Account = new AccountService;
			int place = Service_Account->indx(from, frombank, cardtype);
			string save;
			if (frombank == "Banquemisr")
			{
				save = "masterBanquemisr.txt";
			}
			else if (frombank == "National Bank of Egypt")
			{
				save = "masterNational Bank of Egypt.txt";
			}
			else if (frombank == "The United Bank of Egypt")
			{
				save = "masterThe United Bank of Egypt.txt";
			}
			Service_Account->updatefile(save, place, amountofmoney, '-');
		}
	}
	void collect_money(CardModel* to, string tobank)
	{
		if (S->cheak_card(to, tobank, cardtype))
		{
			ifstream file1;
			file1.open("transaction.txt", ios::in);
			vector <string>sv;
			while (file1.is_open())
			{
				string line;
				while (getline(file1, line))
				{
					sv.push_back(line);
				}
				file1.close();
			}
			vector<string>money;
			for (int i = 0; i < sv.size(); i++)
			{
				if (sv[i] == to->CardNumber)
				{
					if (sv[i + 1] != "0") {
						money.push_back(sv[i+1]);
					}
					sv[i+1] = "0";
				}
			}
			ofstream file2;
			file2.open("transaction.txt", ios::trunc);
			for (int i = 0; i < sv.size(); i++)
			{
				file2 << sv[i] << endl;
			}
			file2.close();
			AccountService* Service_Account = new AccountService;
			int place = Service_Account->indx(to, tobank, cardtype);
			string save;
			if (tobank == "Banquemisr")
			{
				save = "masterBanquemisr.txt";
			}
			else if (tobank == "National Bank of Egypt")
			{
				save = "masterNational Bank of Egypt.txt";
			}
			else if (tobank == "The United Bank of Egypt")
			{
				save = "masterThe United Bank of Egypt.txt";
			}
			for (int i = 0; i < money.size(); i++){
				Service_Account->updatefile(save,place,money[i],'+');
			}
		}
	}
};
class OperationService
{
public:
	void SentMoney(string type, CardModel* yourcard,string cardnumber, string frombank, string tobank, string tocard) {
		ICardPayment* yourcart = NULL;
		if (type == "visa card") yourcart = new Visa;
		else yourcart = new MasterCard;
		yourcart->send_money(yourcard, cardnumber, frombank, tobank, tocard);
	}
	void CollectMoney(string type, CardModel* to, string tobank) {
		ICardPayment* yourcart = NULL;
		if (type == "visa card") yourcart = new Visa;
		else yourcart = new MasterCard;
		yourcart->collect_money(to, tobank);
	}
	void transaction_history(string cardnumber)
	{
		ifstream file1;
		file1.open("transaction history.txt", ios::in);
		vector<string>v;
		while (file1.is_open())
		{
			string line;
			while (getline(file1, line))
			{
				v.push_back(line);
			}
			file1.close();
		}
		for (int i = 0; i < v.size(); i += 3)
		{
			if (v[i+1] == cardnumber)
			{
				cout << v[i] << " sent to you " << v[i+2] << " $ " << endl;
			}
		}
	}
	CardModel* cincard() {
		CardModel* yourcard = new CardModel;
		string yourcardtype;
		int banknumber;
		int cardnumber;
		cout << "choise your card type" << endl;
		cout << "1- visa card" << endl;
		cout << "2- master card" << endl;
		cin >> cardnumber;
		cout << "choise your bank" << endl;
		cout << "1-Banquemisr" << endl;
		cout << "2-National Bank of Egypt" << endl;
		cout << "3-The United Bank of Egypt" << endl;
		cin >> banknumber;
		if (banknumber == 1)
		{
			cinbank = "Banquemisr";
		}
		else if (banknumber == 2)
		{
			cinbank = "National Bank of Egypt";
		}
		else
		{
			cinbank = "The United Bank of Egypt";
		}
		if (cardnumber == 1)
		{
			cincardtype = "visa card";
		}
		else
		{
			cincardtype = "master card";
		}
		string cardholderName;
		string phoneNumber;
		string cardNumber;
		string zipCode;
		string cVV;
		cout << "enter card holder Name : the name appear on the Visa card." << endl;
		cin >> cardholderName;
		cout << "enter card Number : A 16-digit number unique to your card." << endl;
		cin >> cardNumber;
		while (cardNumber.size() != 16)
		{
			cout << "enter valid card Number : A 16-digit number unique to your card." << endl;
			cin >> cardNumber;
		}
		cout << "enter CVV (Card Verification Value) : A three-digit security code on the back of the card" << endl;
		cin >> cVV;
		while (cVV.size() != 3)
		{
			cout << "enter valid CVV (Card Verification Value) : A three-digit security code on the back of the card" << endl;
			cin >> cVV;
		}
		cout << "Zip Code : The postal code of the cardholder's billing address." << endl;
		cin >> zipCode;
		cout << "enter the phone number that you link with your card" << endl;
		cin >> phoneNumber;
		yourcard->CardholderName = cardholderName;
		yourcard->PhoneNumber = phoneNumber;
		yourcard->CardNumber = cardNumber;
		yourcard->ZipCode = zipCode;
		yourcard->CVV = cVV;
		return yourcard;
	}
};
signed main()
{
	string name;
	string email;
	string city;
	string gender;
	string password;
	string birthdayyear;
	string phonenumber;
	AccountService service;
	bool cheakaccountt = 0;
	while (1) {
		cout << "choise one operation" << endl;
		int numofoperation;
		if (cheakaccountt == 0) {
			cout << "1 - log in " << endl;
		}
		cout << "2 - Send Money" << endl;
		cout << "3 - Collect Money" << endl;
		cout << "4 - Transaction History" << endl;
		cout << "5 - cheak you card" << endl;
		cout << "6 - log out " << endl;
		cout << "7 - end progam " << endl;
		cin >> numofoperation;
		while (numofoperation > 7 or numofoperation < 1) {
			cout << "Please Enter Valid Operation " << endl;
		}
		while (numofoperation > 1 and numofoperation <= 5 and cheakaccountt == 0) {
			cout << "you have to log in at first " << endl;
			cout << "choise operation again" << endl;
			cout << "1 - log in " << endl;
			cout << "2 - Send Money" << endl;
			cout << "3 - Collect Money" << endl;
			cout << "4 - Transaction History" << endl;
			cout << "5 - cheak you card" << endl;
			cout << "6 - log out " << endl;
			cin >> numofoperation;
		}
		if (numofoperation == 1) {
			system("cls");
			AccountModel* new_account = new AccountModel;
			cout << "enter your name" << endl;
			cin >> name;
			new_account->Name = name;
			cout << "enter your email" << endl;
			cin >> email;
			new_account->Email = email;
			cout << "enter your city" << endl;
			cin >> city;
			new_account->City = city;
			cout << "enter your gender" << endl;
			cin >> gender;
			new_account->Gender = gender;
			while (gender != "male" and gender != "female")
			{
				cout << "please enter correct gender male or female" << endl;
				cin >> gender;
				new_account->Gender = gender;
			}
			cout << "enter your password" << endl;
			cin >> password;
			new_account->Password = password;
			cout << "enter your birthday year" << endl;
			cin >> birthdayyear;
			new_account->BirthdayYear = birthdayyear;
			cout << "enter your phone number" << endl;
			cin >> phonenumber;
			new_account->PhoneNumber = phonenumber;
			CreateAccount newaccount(new_account);
			if (service.cheak_account(newaccount.account))
			{
				service.save_account(newaccount.account);
				cout << "welcome new user (:" << endl;
			}
			else
			{
				cout << "welcome back " << name << endl;
			}
			cheakaccountt = 1;
		}
		if (numofoperation == 2)
		{
			system("cls");
			CardModel* yourcard = new CardModel;
			bool one = 0;
			bool two = 0;
			string tobank;
			string frombank;
			string tocard;
			string fromcard;
			string cardNumber;
			cout << "to sent money you have to add your visa and visa you want to sent " << endl;
			while (true) {
				int banknumber;
				string bank;
				string cardtype;
				int cardnumber;
				cout << "choise your card type" << endl;
				cout << "1- visa card" << endl;
				cout << "2- master card" << endl;
				cin >> cardnumber;
				cout << "choise your bank" << endl;
				cout << "1-Banquemisr" << endl;
				cout << "2-National Bank of Egypt" << endl;
				cout << "3-The United Bank of Egypt" << endl;
				cin >> banknumber;
				if (banknumber == 1)
				{
					bank = "Banquemisr";
					frombank = "Banquemisr";
				}
				else if (banknumber == 2)
				{
					bank = "National Bank of Egypt";
					frombank = "National Bank of Egypt";
				}
				else
				{
					bank = "The United Bank of Egypt";
					frombank = "The United Bank of Egypt";
				}
				if (cardnumber == 1)
				{
					cardtype = "visa card";
					fromcard = "visa card";
				}
				else
				{
					cardtype = "master card";
					fromcard = "master card";
				}

				string cardholderName;
				string phoneNumber;
				string cardNumber;
				string zipCode;
				string cVV;
				cout << "enter card holder Name : the name appear on the Visa card." << endl;
				cin >> cardholderName;
				cout << "enter card Number : A 16-digit number unique to your card." << endl;
				cin >> cardNumber;
				while (cardNumber.size() != 16)
				{
					cout << "enter valid card Number : A 16-digit number unique to your card." << endl;
					cin >> cardNumber;
				}
				cout << "enter CVV (Card Verification Value) : A three-digit security code on the back of the card" << endl;
				cin >> cVV;
				while (cVV.size() != 3)
				{
					cout << "enter valid CVV (Card Verification Value) : A three-digit security code on the back of the card" << endl;
					cin >> cVV;
				}
				cout << "Zip Code : The postal code of the cardholder's billing address." << endl;
				cin >> zipCode;
				cout << "enter the phone number that you link with your card" << endl;
				cin >> phoneNumber;
				yourcard->CardholderName = cardholderName;
				yourcard->PhoneNumber = phoneNumber;
				yourcard->CardNumber = cardNumber;
				yourcard->ZipCode = zipCode;
				yourcard->CVV = cVV;
				if (service.cheak_card(yourcard, bank, cardtype))
				{
					cout << "Your card is valid" << endl;
					service.add_card(yourcard);
					one = 1;
					break;
				}
				else
				{
					cout << "Your card is not valid" << endl;
					cout << "if you want to try again enter (1)" << endl;
					int opo; cin >> opo;
					if (opo != 1)break;
				}
			}
			while (true) {
				int banknumber;
				string bank;
				string cardtype;
				int cardnumber;
				cout << "choise the type of the card that you want to sent money" << endl;
				cout << "1- visa card" << endl;
				cout << "2- master card" << endl;
				cin >> cardnumber;
				cout << "choise the bank of the card that you want to sent money" << endl;
				cout << "1-Banquemisr" << endl;
				cout << "2-National Bank of Egypt" << endl;
				cout << "3-The United Bank of Egypt" << endl;
				cin >> banknumber;
				if (banknumber == 1)
				{
					bank = "Banquemisr";
					tobank = "Banquemisr";
				}
				else if (banknumber == 2)
				{
					bank = "National Bank of Egypt";
					tobank = "National Bank of Egypt";
				}
				else
				{
					bank = "The United Bank of Egypt";
					tobank = "The United Bank of Egypt";
				}
				if (cardnumber == 1)
				{
					cardtype = "visa card";
					tocard = "visa card";
				}
				else
				{
					cardtype = "master card";
					tocard = "master card";
				}
				
				cout << "enter card Number : A 16-digit number unique to the card that you want to sent money." << endl;
				cin >> cardNumber;
				while (cardNumber.size() != 16)
				{
					cout << "enter card Number : A 16-digit number unique to the card that you want to sent money." << endl;
					cin >> cardNumber;
				}
				if (service.cheak_card(cardNumber,bank,cardtype))
				{
					cout << "card you want to sent money to it is valid" << endl;
					two = 1;
					break;
				}
				else
				{
					cout << "card you want to sent money to it is not valid" << endl;
					cout << "if you want to try again enter (1)" << endl;
					int opo; cin >> opo;
					if (opo != 1)break;
				}
			}
			if (one == 1 and two == 1)
			{
				OperationService* Operation_Service = new OperationService;
				Operation_Service->SentMoney(fromcard, yourcard,cardNumber, frombank, tobank, tocard);
				cout << "Money has sent succisfully" << endl;
			}
			else {
				cout << "Sorry money has't sent" << endl;
			}
		}
		if (numofoperation == 3) {
			system("cls");
			cout << "to collect money you have to verifay your card " << endl;
			while (true) {
				OperationService* Operation_Service = new OperationService;
				CardModel* Card_model = new CardModel;
				Card_model = Operation_Service->cincard();
				if (service.cheak_card(Card_model, cinbank, cincardtype))
				{
					cout << "Your card is valid" << endl;
					Operation_Service->CollectMoney(cincardtype, Card_model, cinbank);
					cout << "Money has collect succisfully" << endl;
					break;
				}
				else
				{
					cout << "Your card is not valid" << endl;
				}
				cout << "if you want to use this future again enter (1)" << endl;
				int one_zero; cin >> one_zero;
				if (one_zero != 1)break;
			}
		}
		if (numofoperation == 4) {
			system("cls");
			cout << "to see your transaction " << endl;
			while (true) {
				OperationService* Operation_Service = new OperationService;
				string cardnumber;
				cout << "enter card Number : A 16-digit number unique to the card that you want to sent money." << endl;
				cin >> cardnumber;
				while (cardnumber.size() != 16)
				{
					cout << "enter valid card Number : A 16-digit number unique to the card that you want to sent money." << endl;
					cin >> cardnumber;
				}
				if (service.cheak_card(cardnumber, cinbank, cincardtype))
				{
					cout << "this is you transaction " << endl;
					Operation_Service->transaction_history(cardnumber);
				}
				else
				{
					cout << "Your card is not valid" << endl;
				}
				cout << "if you want to use this future again enter (1)" << endl;
				int one_zero; cin >> one_zero;
				if (one_zero != 1)break;
			}
		}
		if (numofoperation == 5) {
			system("cls");
			cout << "cin your card to cheak it" << endl;
			while (true) {
				OperationService* Operation_Service = new OperationService;
				CardModel* Card_model = new CardModel;
				Card_model = Operation_Service->cincard();
				if (service.cheak_card(Card_model, cinbank, cincardtype))
				{
					cout << "you card is valid " << endl;
				}
				else
				{
					cout << "Your card is not valid" << endl;
				}
				cout << "if you want to use this future again enter (1)" << endl;
				int one_zero; cin >> one_zero;
				if (one_zero != 1)break;
			}
		}
		if (numofoperation == 6) {
			system("cls");
			cheakaccountt = 0;
		}
		if (numofoperation == 7) {
			system("cls");
			cout << "program end" << endl;
			break;
		}
	}
}